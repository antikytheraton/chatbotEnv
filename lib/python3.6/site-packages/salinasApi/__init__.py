import requests
import json
from pprint import pprint
from collections import OrderedDict

#Clase que ayuda a ordenar los JSONS
class JSONObject:
	def __init__(self, d):
		self.__dict__ = d
baseUrl = "https://safe-island-16114.herokuapp.com"

class SalinasApi():
	#baseUrl = "http://localhost:1432"

	def __init__(self, env):
		self.env = env
		self.baseUrl = self.setEnviroment()

	def printConfig(self):
		print(self.env)
		print(self.baseUrl)

	def generarEnvio(requestParams):
		generarUrl = baseUrl + '/message/'
		#Hace la peticion y la respuesta la guarda en la variable
		peticionEnviar = requests.put(generarUrl,json=requestParams)
		#Si el servidor contesta exitosamente entra a la sentencia		
		if peticionEnviar.status_code == 200:
			#Parsea el json
			dic = peticionEnviar.text
			json_str = json.dumps(dic)
			dic = json.loads(json_str)
			datos = json.loads(dic,object_pairs_hook=OrderedDict)
			datos = json.loads(dic,object_hook=JSONObject)
			#Obtiene el mensaje de salida del json y lo almacena
			operacion = datos.mensajeSalida
			#print(dic)
			#Regresa True y el mensaje de salida
			return True,operacion

		elif peticionEnviar.status_code == 400:
			return False,"Error en el JSON"
		
		else: 
			raise ValueError('Error en la petición')
			pass
		pass

	def findForName(requestParams):
		generarUrl = baseUrl + '/busquedaNombre/'
		# json = json.dumps(requestParams)
		peticionEnviar = requests.post(generarUrl,json=requestParams)
		# req = requests.get('https://www.google.com.mx')
		# return req.status_code		
		if peticionEnviar.status_code == 200:
			dic = peticionEnviar.text
			json_str = json.dumps(dic)
			dic = json.loads(json_str)
			datos = json.loads(dic,object_pairs_hook=OrderedDict)
			datos = json.loads(dic,object_hook=JSONObject)
			operacion = datos.mensajeSalida
			print(dic)

			return True,operacion

		elif peticionEnviar.status_code == 400:
			return False,"Error en el JSON"
		
		else: 
			raise ValueError('Error en la petición')
			# return False,peticionEnviar.json['mensajeSalida'],{}
			pass
		pass

	def findForBeneficiario(requestParams):
		generarUrl = baseUrl + '/busquedaBeneficiario/'
		# json = json.dumps(requestParams)
		peticionEnviar = requests.post(generarUrl,json=requestParams)
		# req = requests.get('https://www.google.com.mx')
		# return req.status_code		
		if peticionEnviar.status_code == 200:
			dic = peticionEnviar.text
			json_str = json.dumps(dic)
			dic = json.loads(json_str)
			datos = json.loads(dic,object_pairs_hook=OrderedDict)
			datos = json.loads(dic,object_hook=JSONObject)
			operacion = datos.mensajeSalida
			#print(dic)

			return True,operacion

		elif peticionEnviar.status_code == 400:
			return False,"Error en el JSON"
		
		else: 
			raise ValueError('Error en la petición')
			# return False,peticionEnviar.json['mensajeSalida'],{}
			pass
		pass
	
	def ClientAltaRemitente(requestParams):
		generarUrl = baseUrl + '/ClientAltaRemitente/'
		# json = json.dumps(requestParams)
		peticionEnviar = requests.post(generarUrl,json=requestParams)
		# req = requests.get('https://www.google.com.mx')
		# return req.status_code		
		if peticionEnviar.status_code == 200:
			dic = peticionEnviar.text
			json_str = json.dumps(dic)
			dic = json.loads(json_str)
			datos = json.loads(dic,object_pairs_hook=OrderedDict)
			datos = json.loads(dic,object_hook=JSONObject)
			operacion = datos.idCliente
			response = datos.mensajeSalida
			#print(dic)

			return [True,response,operacion]


		elif peticionEnviar.status_code == 400:
			return False,"Error en el JSON"
		
		else: 
			raise ValueError('Error en la petición')
			# return False,peticionEnviar.json['mensajeSalida'],{}
			pass
		pass
	
	def ClientAltaBeneficiario(requestParams):
		generarUrl = baseUrl + '/ClientAltaBeneficiario/'
		# json = json.dumps(requestParams)
		peticionEnviar = requests.put(generarUrl,json=requestParams)
		# req = requests.get('https://www.google.com.mx')
		# return req.status_code		
		if peticionEnviar.status_code == 200:
			dic = peticionEnviar.text
			json_str = json.dumps(dic)
			dic = json.loads(json_str)
			datos = json.loads(dic,object_pairs_hook=OrderedDict)
			datos = json.loads(dic,object_hook=JSONObject)
			operacion = datos.idCliente
			response = datos.mensajeSalida
			#print(dic)

			return [True,response,operacion]

		elif peticionEnviar.status_code == 400:
			return [False,"Error en el JSON"]
		
		else: 
			raise ValueError('Error en la petición')
			# return False,peticionEnviar.json['mensajeSalida'],{}
			pass
		pass

	def ClientValida(requestParams):
		generarUrl = baseUrl + '/ClientValida/'
		print(requestParams)
		peticionEnviar = requests.post(generarUrl,json=requestParams) 
		if peticionEnviar.status_code == 200:
			dic = peticionEnviar.text
			json_str = json.dumps(dic)
			dic = json.loads(json_str)
			datos = json.loads(dic,object_pairs_hook=OrderedDict)
			datos = json.loads(dic,object_hook=JSONObject)
			operacion = datos.bloqueOfac
			response = datos.mensajeSalida
			#print(dic)
			print(peticionEnviar.text)
			print("---------------------LISTA NEGRA")
			print(operacion)
			return [True,response,operacion]

		elif peticionEnviar.status_code == 400:
			return False,"Error en el JSON"
		
		else: 
			raise ValueError('Error en la petición')
			# return False,peticionEnviar.json['mensajeSalida'],{}
			pass
		pass

	def EnvioCotiza(requestParams):
		generarUrl = baseUrl + '/EnvioCotiza/'
		# json = json.dumps(requestParams)
		peticionEnviar = requests.post(generarUrl,json=requestParams)
		# req = requests.get('https://www.google.com.mx')
		# return req.status_code		
		if peticionEnviar.status_code == 200:
			dic = peticionEnviar.text
			json_str = json.dumps(dic)
			dic = json.loads(json_str)
			datos = json.loads(dic,object_pairs_hook=OrderedDict)
			datos = json.loads(dic,object_hook=JSONObject)
			response = datos.mensajeSalida
			operacion = datos.montoTotal
			#print(dic)

			return [True,operacion,response]

		elif peticionEnviar.status_code == 400:
			return False,"Error en el JSON"
		
		else: 
			raise ValueError('Error en la petición')
			# return False,peticionEnviar.json['mensajeSalida'],{}
			pass
		pass

	def EnvioGenera(requestParams):
		generarUrl = baseUrl + '/EnvioGenera/'
		# json = json.dumps(requestParams)
		peticionEnviar = requests.put(generarUrl,json=requestParams)
		# req = requests.get('https://www.google.com.mx')
		# return req.status_code		
		if peticionEnviar.status_code == 200:
			dic = peticionEnviar.text
			json_str = json.dumps(dic)
			dic = json.loads(json_str)
			datos = json.loads(dic,object_pairs_hook=OrderedDict)
			datos = json.loads(dic,object_hook=JSONObject)
			response = datos.mensajeSalida
			operacion=datos.folioTransferancia
			tarifa = datos.tarifa
			descuentoCF = datos.descuentoCF
			monto = datos.impuestos[0].monto
			saldoAbonadoMon = datos.saldoAbonadoMon
			tcfx = datos.tcfx
			descuentoCupon = datos.montoDescuentoCupon
			claveSeguridad = datos.claveSeguridad
			montoTotal = datos.montoTotal
			montoEnvioMG = datos.montoEnvioMG
			referenciaPreenvio = datos.referenciaPreenvio
			codigoSalida = datos.codigoSalida
			mensajeSalida = datos.mensajeSalida
			return [True,operacion,tarifa,descuentoCF,monto,saldoAbonadoMon,tcfx,descuentoCupon,claveSeguridad,montoTotal,montoEnvioMG,referenciaPreenvio,codigoSalida,mensajeSalida]

		elif peticionEnviar.status_code == 400:
			return False,"Error en el JSON"
		
		else: 
			raise ValueError('Error en la petición')
			# return False,peticionEnviar.json['mensajeSalida'],{}
			pass
		pass

	def EnvioConfirma(requestParams):
		generarUrl = baseUrl + '/EnvioConfirma/'
		# json = json.dumps(requestParams)
		peticionEnviar = requests.put(generarUrl,json=requestParams)
		# req = requests.get('https://www.google.com.mx')
		# return req.status_code		
		if peticionEnviar.status_code == 200:
			dic = peticionEnviar.text
			json_str = json.dumps(dic)
			dic = json.loads(json_str)
			datos = json.loads(dic,object_pairs_hook=OrderedDict)
			datos = json.loads(dic,object_hook=JSONObject)
			operacion = datos.mensajeSalida
			#print(dic)

			return True,operacion

		elif peticionEnviar.status_code == 400:
			return False,"Error en el JSON"
		
		else: 
			raise ValueError('Error en la petición')
			# return False,peticionEnviar.json['mensajeSalida'],{}
			pass
		pass

	def usuarioEnListaNegra(self,requestParams):
		listaNegraUrl = self.baseUrl + '/'
		peticionListaNegra = requests.put(generarEnvio,json=requestParams)
		if peticionListaNegra.status_code == 200:
			pass
		pass	
		
			
	def setEnviroment(self):
		if self.env == 'PRO':
			return ''
		else: 
			return ''
			# return 'http://10.81.11.78:8150/WSPreEnvioDEX/services'
			pass

class peticiones():
	#baseUrl = "http://localhost:8000"
	baseUrl = "https://safe-island16114.herokuapp.com"

	def generaEnvioP(self):
		jsonSend = {
	"uid":"UID000000000001",
	"paisId":1,
	"agenteId":131,
	"subsidiariaId":1,
	"sucursalId":1,
	"usuarioId":"USRPRENVIO",
	"numCteRemitenteId":130360123,
	"numCteBeneficiarioId":130360127,
	"monedaEnvioId":1,
	"montoEnvio":100.0,
	"paisDestinoId":1,
	"estadoDestinoId":9,
	"ciudadDestinoId":17,
	"monedaDestinoId":1,
	"mensajeCliente":"ENVIO PRUEBA TRU",
	"tipoEnvio":16
		}

		responsServer = SalinasApi.generarEnvio(self,jsonSend)
		return(responsServer)

	def busquedaPorNombreP(uid,nombre,apPaterno,apMaterno,fechaNacCte,error):
		jsonSend = {
	"uid":uid,
	"paisId":1,
	"agenteId":131,
	"subsidiariaId":1,
	"sucursalId":9559,
	"usuarioId":"USRPRENVIO",
	"nombreCte":nombre.upper(),
	"apPaternoCte":apPaterno.upper(),
	"apMaternoCte":apMaterno.upper(),
	"fechaNacCte":fechaNacCte,
	"error":error}

		responsServer = SalinasApi.findForName(jsonSend)
		return(responsServer)

	def busquedaBeneficiarioP(self):
		jsonSend =  {
	"uid":"UID000000000001",
	"paisId":1,
	"agenteId":131,
	"subsidiariaId":1,
	"sucursalId":1,
	"usuarioId":"USRPRENVIO",
	"clienteId":"130360123",
	"error":1
	}


		responsServer = SalinasApi.findForBeneficiario(self,jsonSend)
		return(responsServer)

	def ClientAltaRemitenteP(uid,nombre,apPaterno,apMaterno,fechaNacCte,colonia,estado,municpio):
		jsonSend = {
	"uid":uid,
	"paisId":1,
	"agenteId":131,
	"subsidiariaId":1,
	"sucursalId":1,
	"usuarioId":"USRPRENVIO",
	"primerNombre":nombre.upper(),
	"apPaterno":apPaterno.upper(),
	"apMaterno":apMaterno.upper(),
	"fechaNacimiento":fechaNacCte,
	"paisIdentificacion":1,
	"tipoIdentificacionId":"1",
	"folioIdentificacion":"0",
	"numeroTelefono":"8123415446",
	"nombrePais":"MEXICO",
	"nombreEstado":estado.upper(),
	"nombreColonia":colonia.upper(),
	"nombreMunicipio":municpio.upper()
	}

		responsServer = SalinasApi.ClientAltaRemitente(jsonSend)
		return(responsServer)

	def ClientAltaBeneficiarioP(uid,nombre,apPaterno,apMaterno,idCliente):
		jsonSend = {
   "uid":uid,
   "paisId":1,
   "agenteId":131,
   "subsidiariaId":1,
   "sucursalId":1,
   "usuarioId":"USRPRENVIO",
   "primerNombre":nombre.upper(),
   "apPaterno":apPaterno.upper(),
   "apMaterno":apMaterno.upper(),
   "paisIdentificacion":1,
   "tipoIdentificacionId":1,
   "clienteRemitenteId":idCliente
	}

		responsServer = SalinasApi.ClientAltaBeneficiario(jsonSend)
		return(responsServer)
	
	def ClientValidaP(uid,nombre,apPaterno,apMaterno,fechaNacimiento):
		jsonSend = {
    "uid":uid,
    "paisId":1,
    "agenteId":131,
    "subsidiariaId":"1",
    "sucursalId":"1",
    "usuarioId":"USRPRENVIO",
    "nombreCte":nombre.upper(),
    "apPaternoCte":apPaterno.upper(),
    "apMaternoCte":apMaterno.upper(),
    "fechaNacimientoCte":fechaNacimiento,
    "numeroEconomico":1,
    "negocioId":2,
    "caja":"FACEBOOK",
    "error":2
  	}

		responsServer = SalinasApi.ClientValida(jsonSend)
		return(responsServer)

	def EnvioCotizaP(uid,idCliente):
		jsonSend = {
    "uid":uid,
    "paisId":1,
    "agenteId":131,
    "subsidiariaId":1,
    "sucursalId":1,
    "usuarioId":"USRPRENVIO",
    "numCteRemitenteId":idCliente,
    "monedaEnvioId":1,
    "montoEnvio":110.00,
    "paisDestinoId":1,      
    "estadoDestinoId":9,
    "ciudadDestinoId":17,
    "monedaDestinoId":1,
    "tipoEnvio":16,
    "error":1,
    "montosAcumulados":"{""}"
	}


		responsServer = SalinasApi.EnvioCotiza(jsonSend)
		return(responsServer)

	def EnvioGeneraP(uid,numCteRemitenteId,numCteBeneficiarioId,monto):
		jsonSend ={
		"uid":uid,
		"paisId":1,
		"agenteId":131,
		"subsidiariaId":1,
		"sucursalId":1,
		"usuarioId":"USRPRENVIO",
		"numCteRemitenteId":numCteRemitenteId,
		"numCteBeneficiarioId":numCteBeneficiarioId,
		"monedaEnvioId":1,
		"montoEnvio":monto,
		"paisDestinoId":1,
		"estadoDestinoId":20,
		"ciudadDestinoId":1,
		"monedaDestinoId":1,
		"mensajeCliente":"ENVIO PRUEBA TRU",
		"agenteDestinoId":1,
		"subsidiariaDestinoId":1,
		"clasificacionAgenteId":1,
		"tipoEnvio":16,
		"telefonoRem":"8123415446",
		"telefonoBen":"9541278644"
		}


		responsServer = SalinasApi.EnvioGenera(jsonSend)
		return(responsServer)

	def EnvioConfirmaP(uid,refTransferencia):
		jsonSend ={
		"uid":uid,
		"paisId":1,
		"agenteId":131,
		"subsidiariaId":1,
		"sucursalId":1,
		"usuarioId":"USRPRENVIO",
		"refTransferencia":refTransferencia,
		"paisIdentificacion":1,
		"tipoIdentificacion":1,
		"montoTotal":119,
		"error":1
	}

		responsServer = SalinasApi.EnvioConfirma(jsonSend)
		return(responsServer)

	def busquedaTiendaP(latitude,longitude):
		url = "https://services.elektra.com.mx/api/StoreLocator/GetNearByStores?latitude=%s&longitude=%s&radius=10&unitBusinessId=1" % (latitude, longitude)
		peticionBusquedaTienda = requests.get(url)
		sucursales = []
		if peticionBusquedaTienda.status_code == 200:
			response = peticionBusquedaTienda.json()
			numSucursales = len(response['Result'])
			if numSucursales < 5:
				for r in range(numSucursales):
					sucursales.append(response['Result'][r])
			else:
				for r in range(5):
					sucursales.append(response['Result'][r])
			return [True,sucursales]

		elif peticionBusquedaTienda.status_code == 400:
			return False,"Error en el JSON"
		
		else: 
			raise ValueError('Error en la petición')
			pass
		pass


'''
	def busquedaTienda(request):
		url = "https://services.elektra.com.mx/api/StoreLocator/GetNearByStores"
		requestses = dict(requests)
		peticionBsuqedaTienda = requests.get(url,params=requestses)
		print(busuedaTienda.url)
		
		if peticionBsuqedaTienda.status_code == 200:
			dic = peticionBsuqedaTienda.text
			json_str = json.dumps(dic)
			dic = json.loads(json_str)
			print(dic)

			return dic

		elif peticionBsuqedaTienda.status_code == 400:
			return False,"Error en el JSON"
		
		else: 
			raise ValueError('Error en la petición')
			pass
		pass
	'''
'''

parameter = "{'latitude':19.3413049,'longitude':-99.1836702,'radius':10,'unitBusinessId':1}"
response = peticiones.busuedaTienda(parameter)
print(response)

	jsonSend = {
	"uid":"UID000000000001",
	"paisId":1,
	"agenteId":1,
	"subsidiariaId":1,
	"sucursalId":1,
	"usuarioId":"ADMIN",
	"numCteRemitenteId":130359949,
	"numCteBeneficiarioId":130359950,
	"monedaEnvioId":1,
	"montoEnvio":230.0,
	"paisDestinoId":1,
	"estadoDestinoId":20,
	"ciudadDestinoId":1,
	"monedaDestinoId":1,
	"mensajeCliente":"ENVIO PRUEBA ",
	"envioEmpleado":0,
	"promociones":[{
			"idPromocion":"",
			"descripcion":"",
			"monto":"",
			"tipo":1}],
	"agenteDestinoId":1,
	"montoUsarMonedero":0.0,
	"subsidiariaDestinoId":1,
	"clasificacionAgenteId":1,
	"mtcnDispersion":1123123123,
	"aplicaRedondeo":0,
	"tipoEnvio":15,
	"tipoCambioAgente":1,
	"caja":"02",
	"montoDestMoneyGram":0.0,	
	"tipoCambioDolar":0.0,
	"noCuenta":"0",
	"localidadSuc":1,
	"numSucursal":1
	}

	responsServer = generarEnvio(baseUrl,jsonSend)
	print(responsServer)
'''
